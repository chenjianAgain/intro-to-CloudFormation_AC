Parameters:
  NameOfService:
    Description: "The name of the service this stack is to be used for."
    Default: "Test Hybris"
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
    Default: "Joseph-ACG-Demo"
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-009d6802948d06e52
    us-west-1:
      AMI: ami-bf5540df
    eu-west-1:
      AMI: ami-3bfab942
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721    
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init:
        config: 
          packages: 
            yum:
              httpd: []
              php: []
              java-1.8.0-openjdk-devel: []
          files: 
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Abs was here!"; ?>
          services: 
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      SecurityGroupIds:
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: !Ref NameOfService
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash -xe            
            # Ensure AWS CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance  --region ${AWS::Region}
            
            # Custom Code
            rpm --import 'http://nginx.org/keys/nginx_signing.key'
            echo '[nginx]
            name=nginx repo
            baseurl=http://nginx.org/packages/centos/7/x86_64
            gpgcheck=1
            enabled=1' | sudo bash -c 'cat > /etc/yum.repos.d/nginx.repo'
            
            # install nginx
            yum install nginx
            # add nginx folder
            mkdir -p /var/log/nginx
            # config nginx
            ( cat << ENDHERE
              ## ##
              #user  nobody;
              worker_processes  1;
              #
              ##error_log  logs/error.log;
              ##error_log  logs/error.log  notice;
              ##error_log  logs/error.log  info;
              #
              ##pid        logs/nginx.pid;
              #
              #
              events {
                  worker_connections  1024;
              }
              http {
                    include       mime.types;
                    default_type  application/octet-stream;
                    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
                    #access_log  logs/access.log  main;
                    sendfile        on;
                    #tcp_nopush     on;
                    #keepalive_timeout  0;
                    keepalive_timeout  65;
                    #gzip on;
              server {
                  listen       *:80;
                  server_name  localhost;
                  access_log  /var/log/nginx/access.log  main;
                  error_log  /var/log/nginx/error.log;
                  root   /usr/share/nginx/html;
                  index  index.html index.htm;
                  ## send request back to apache ##
                  location / {
                   proxy_pass  http://127.0.0.1:8081;
                   proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                   proxy_redirect off;
                   proxy_buffering off;
                   proxy_set_header        Host            \$host;
                   proxy_set_header        X-Real-IP       \$remote_addr;
                   proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
                 }
              }
              server {
                  listen       *:443;
                  server_name  localhost;
                     ssl                  on;
                     ssl_certificate      server.crt;
                     ssl_certificate_key  server.key;
                     ssl_session_timeout  5m;
                     ssl_protocols  SSLv3 TLSv1;
                     ssl_ciphers  HIGH:!aNULL:!MD5;
                     ssl_prefer_server_ciphers   on;
                  access_log  /var/log/nginx/ssl_access.log  main;
                  error_log  /var/log/nginx/ssl_error.log;
                  root   /usr/share/nginx/html;
                  index  index.html index.htm;

                  ## send request back to apache ##
                      location / {
                      proxy_pass  http://127.0.0.1:8081;
                      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                      proxy_redirect off;
                      proxy_buffering off;
                      proxy_set_header        Host            \$host;
                      proxy_set_header        X-Real-IP       \$remote_addr;
                      proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header        X-Forwarded-Proto https;
                     }
                 }
              }
              ENDHERE
              ) | sudo bash -c 'cat > /etc/nginx/nginx.conf'

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open Ports 22 and 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
Outputs:
  Website:
    Description: The Public DNS for the EC2 Instance
    Value: !Sub 'http://${EC2Instance.PublicDnsName}'
